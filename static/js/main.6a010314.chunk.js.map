{"version":3,"sources":["black-dashboard/assets/img/anime3.png","utils/getWeb3.js","components/Proposal.js","components/Proposals.js","components/Deposit.js","components/Deposits.js","App.js","black-dashboard/components/Navbars/AdminNavbar.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getWeb3","Promise","resolve","reject","console","log","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","providers","HttpProvider","stop","this","Proposal","react_default","createElement","props","proposal","id","issuer","deadline","name","data","optionBaddr","optionAaddr","Component","Proposals","proposals","map","components_Proposal","key","Deposit","deposit","ContriValue","PropName","Deposits","deposits","components_Deposit","App","React","Map","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","storageValue","accounts","contract","componentDidMount","graph","sent","eth","getAccounts","net","getId","setState","alert","error","fetch","method","headers","Content-Type","Accept","body","JSON","stringify","query","then","r","json","catch","result","anonymousDeposits","newProposalIssueds","contractError","className","class","href","type","data-toggle","aria-controls","aria-expanded","aria-label","components_Proposals","components_Deposits","Boolean","location","hostname","match","ReactDOM","render","react_router_dom","basename","to","react_router","exact","path","component","_ref","params","address","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6a010314.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/anime3.bd6820f1.png\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    console.log('Loaded?')\n    window.addEventListener(\"load\", async () => {\n      console.log('Loaded')\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from 'react';\n\nclass Proposal extends Component {\n\n  render() {\n    /*\n    newProposalIssueds(first: 5) {\n      id\n      issuer\n      deadline\n      name\n      data\n      optionBaddr\n      optionAaddr\n    }\n    */\n    return(\n      <div>\n        <p>ID: {this.props.proposal.id}</p>\n        <p>Issuer: {this.props.proposal.issuer}</p>\n        <p>Deadline: {this.props.proposal.deadline}</p>\n        <p>Name: {this.props.proposal.name}</p>\n        <p>Data: {this.props.proposal.data}</p>\n        <p>optionBaddr: {this.props.proposal.optionBaddr}</p>\n        <p>optionAaddr: {this.props.proposal.optionAaddr}</p>\n        <hr/>\n      </div>\n    )\n\n  }\n}\n\nexport default Proposal\n","import React, { Component } from 'react';\nimport Proposal from './Proposal';\n\nclass Proposals extends Component {\n\n  render() {\n\n    const proposals = this.props.proposals.map(proposal => {\n      return <Proposal key={proposal.id} proposal={proposal}/>\n    })\n\n    return (\n      <div>\n        <h2>Proposals</h2>\n        {proposals}\n\n      </div>\n    )\n  }\n}\n\nexport default Proposals\n","import React, { Component } from 'react';\n\nclass Deposit extends Component {\n\n  /*\n  anonymousDeposits(first: 5) {\n    id\n    SenderAddr\n    ContriValue\n    PropName\n  }\n  */\n  render() {\n    return(\n      <div>\n        <p>ID: {this.props.deposit.id}</p>\n        <p>ContriValue: {this.props.deposit.ContriValue}</p>\n        <p>PropName: {this.props.deposit.PropName}</p>\n        <hr/>\n      </div>\n    )\n\n  }\n}\n\nexport default Deposit\n","import React, { Component } from 'react';\nimport Deposit from './Deposit';\n\nclass Deposits extends Component {\n\n  render() {\n\n    const deposits = this.props.deposits.map(deposit => {\n      return <Deposit key={deposit.id} deposit={deposit}/>\n    })\n\n    return (\n      <div>\n        <h2>Deposits</h2>\n        {deposits}\n\n      </div>\n    )\n  }\n}\n\nexport default Deposits\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport Proposals from './components/Proposals';\nimport Deposits from './components/Deposits';\n\n// import \"./App.css\";\nimport \"./black-dashboard/assets/css/black-dashboard-react.css\";\nimport \"./black-dashboard/assets/css/nucleo-icons.css\";\nimport AdminNavbar from \"./black-dashboard/components/Navbars/AdminNavbar.jsx\";\nimport { Container, Alert } from \"reactstrap\";\n\nvar k\nvar a\nvar red\nvar blue\nvar name\nvar opA\nvar opB\nvar providerone\nvar web3\nvar defaultAccount\nvar proposalissued\nvar deadline\nvar moneymap = new Map();\nvar dataextra\n\nclass App extends Component {\n\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, proposals: [], deposits: [] };\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount = async () => {\n    try {\n      console.log('DidMount...');\n\n      console.log('Loading graph...');\n      await this.graph();\n\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  async graph(){\n\n    console.log('graph()')\n\n    const query = `{\n      anonymousDeposits(first: 5) {\n        id\n        SenderAddr\n        ContriValue\n        PropName\n      }\n      newProposalIssueds(first: 5) {\n        id\n        issuer\n        deadline\n        name\n        data\n        optionBaddr\n        optionAaddr\n      }\n    }`;\n\n    const results = {}\n\n    const result = await fetch('https://api.thegraph.com/subgraphs/name/madhur4444/imgovdynamic', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify({\n        query\n      })\n    }).then(r => r.json()).then(data => data).catch(error => console.log(error))\n\n    console.log('Result:');\n    console.log(result);\n    var anonymousDeposits = result.data.anonymousDeposits;\n    var newProposalIssueds = result.data.newProposalIssueds;\n    this.setState({\n      proposals: newProposalIssueds,\n      deposits: anonymousDeposits\n    });\n\n    console.log('graph() OUT')\n  }\n\n  render() {\n\n    if(this.state.contractError){\n      // return <Alert color=\"danger\">No Contract Deployed On Your Current Network - Try Rinkeby?</Alert>;\n    }\n\n    if (!this.state.web3) {\n      // return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"App\">\n        <div class=\"main-panel\">\n          <nav class=\"navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top \">\n            <div class=\"container-fluid\">\n              <div class=\"navbar-wrapper\">\n\n                <a class=\"navbar-brand\" href=\"#pablo\">Dashboard</a>\n              </div>\n\n              <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" aria-controls=\"navigation-index\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"sr-only\">Toggle navigation</span>\n                <span class=\"navbar-toggler-icon icon-bar\"></span>\n                <span class=\"navbar-toggler-icon icon-bar\"></span>\n                <span class=\"navbar-toggler-icon icon-bar\"></span>\n              </button>\n\n              <div class=\"collapse navbar-collapse justify-content-end\">\n                <ul class=\"navbar-nav\">\n                  <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"#pablo\">\n                      <i class=\"tim-icons icon-bell-55\"></i>  Notifications\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </nav>\n\n          <div class=\"content\">\n            <div class=\"container-fluid\">\n\n              <Proposals proposals={this.state.proposals} />\n              <Deposits deposits={this.state.deposits} />\n\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/*!\n\n=========================================================\n* Black Dashboard React v1.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/black-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/black-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n\n// reactstrap components\nimport {\n  Button,\n  Collapse,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Input,\n  InputGroup,\n  NavbarBrand,\n  Navbar,\n  NavLink,\n  Nav,\n  Container,\n  Modal\n} from \"reactstrap\";\n\nclass AdminNavbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapseOpen: false,\n      modalSearch: false,\n      color: \"navbar-transparent\"\n    };\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateColor);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateColor);\n  }\n  // function that adds color white/transparent to the navbar on resize (this is for the collapse)\n  updateColor = () => {\n    if (window.innerWidth < 993 && this.state.collapseOpen) {\n      this.setState({\n        color: \"bg-white\"\n      });\n    } else {\n      this.setState({\n        color: \"navbar-transparent\"\n      });\n    }\n  };\n  // this function opens and closes the collapse on small devices\n  toggleCollapse = () => {\n    if (this.state.collapseOpen) {\n      this.setState({\n        color: \"navbar-transparent\"\n      });\n    } else {\n      this.setState({\n        color: \"bg-white\"\n      });\n    }\n    this.setState({\n      collapseOpen: !this.state.collapseOpen\n    });\n  };\n  // this function is to open the Search modal\n  toggleModalSearch = () => {\n    this.setState({\n      modalSearch: !this.state.modalSearch\n    });\n  };\n  render() {\n    return (\n      <>\n        <Navbar\n          className={classNames(\"navbar-absolute\", this.state.color)}\n          expand=\"lg\"\n        >\n          <Container fluid>\n            <div className=\"navbar-wrapper\">\n              <div\n                className={classNames(\"navbar-toggle d-inline\", {\n                  toggled: this.props.sidebarOpened\n                })}\n              >\n                <button\n                  className=\"navbar-toggler\"\n                  type=\"button\"\n                  onClick={this.props.toggleSidebar}\n                >\n                  <span className=\"navbar-toggler-bar bar1\" />\n                  <span className=\"navbar-toggler-bar bar2\" />\n                  <span className=\"navbar-toggler-bar bar3\" />\n                </button>\n              </div>\n              <NavbarBrand href=\"#pablo\" onClick={e => e.preventDefault()}>\n                {this.props.brandText}\n              </NavbarBrand>\n            </div>\n            <button\n              aria-expanded={false}\n              aria-label=\"Toggle navigation\"\n              className=\"navbar-toggler\"\n              data-target=\"#navigation\"\n              data-toggle=\"collapse\"\n              id=\"navigation\"\n              type=\"button\"\n              onClick={this.toggleCollapse}\n            >\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n            </button>\n            <Collapse navbar isOpen={this.state.collapseOpen}>\n              <Nav className=\"ml-auto\" navbar>\n                <InputGroup className=\"search-bar\">\n                  <Button\n                    color=\"link\"\n                    data-target=\"#searchModal\"\n                    data-toggle=\"modal\"\n                    id=\"search-button\"\n                    onClick={this.toggleModalSearch}\n                  >\n                    <i className=\"tim-icons icon-zoom-split\" />\n                    <span className=\"d-lg-none d-md-block\">Search</span>\n                  </Button>\n                </InputGroup>\n                <UncontrolledDropdown nav>\n                  <DropdownToggle\n                    caret\n                    color=\"default\"\n                    data-toggle=\"dropdown\"\n                    nav\n                  >\n                    <div className=\"notification d-none d-lg-block d-xl-block\" />\n                    <i className=\"tim-icons icon-sound-wave\" />\n                    <p className=\"d-lg-none\">Notifications</p>\n                  </DropdownToggle>\n                  <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Mike John responded to your email\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        You have 5 more tasks\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Your friend Michael is in town\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Another notification\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Another one\n                      </DropdownItem>\n                    </NavLink>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav>\n                  <DropdownToggle\n                    caret\n                    color=\"default\"\n                    data-toggle=\"dropdown\"\n                    nav\n                    onClick={e => e.preventDefault()}\n                  >\n                    <div className=\"photo\">\n                      <img alt=\"...\" src={require(\"../../assets/img/anime3.png\")} />\n                    </div>\n                    <b className=\"caret d-none d-lg-block d-xl-block\" />\n                    <p className=\"d-lg-none\">Log out</p>\n                  </DropdownToggle>\n                  <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Profile</DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Settings</DropdownItem>\n                    </NavLink>\n                    <DropdownItem divider tag=\"li\" />\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Log out</DropdownItem>\n                    </NavLink>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n                <li className=\"separator d-lg-none\" />\n              </Nav>\n            </Collapse>\n          </Container>\n        </Navbar>\n        <Modal\n          modalClassName=\"modal-search\"\n          isOpen={this.state.modalSearch}\n          toggle={this.toggleModalSearch}\n        >\n          <div className=\"modal-header\">\n            <Input id=\"inlineFormInputGroup\" placeholder=\"SEARCH\" type=\"text\" />\n            <button\n              aria-label=\"Close\"\n              className=\"close\"\n              data-dismiss=\"modal\"\n              type=\"button\"\n              onClick={this.toggleModalSearch}\n            >\n              <i className=\"tim-icons icon-simple-remove\" />\n            </button>\n          </div>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default AdminNavbar;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, Link, Route } from 'react-router-dom'\n// <App />,\n\nconst About = () => (\n  <div>\n    <h2>About</h2>\n  </div>\n)\n\nconst Profile = ({match}) => (\n  <div>\n    <h2>Profile For Address: {match.params.address}</h2>\n  </div>\n)\n\n// <Route exact path=\"/\" component={App} />\n\nReactDOM.render(\n  <HashRouter basename='/'>\n      <div>\n        <aside>\n          <Link to={`/`}>Home</Link>\n          <Link to={`/about`}>About</Link>\n        </aside>\n\n        <main>\n          <Route exact path=\"/\" component={App} />\n          <Route path=\"/home\" component={App} />\n          <Route path=\"/about\" component={About} />\n          <Route exact path=\"/profile/:address\" component={Profile} />\n        </main>\n      </div>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}