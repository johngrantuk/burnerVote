{"version":3,"sources":["black-dashboard/assets/img/anime3.png","utils/getWeb3.js","black-dashboard/components/Navbars/AdminNavbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","getWeb3","Promise","resolve","reject","window","addEventListener","Object","asyncToGenerator","regenerator_default","a","mark","_callee","web3","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","t0","console","log","providers","HttpProvider","stop","this","React","Component","App","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","storageValue","accounts","contract","componentDidMount","networkId","deployedNetwork","instance","sent","eth","getAccounts","net","getId","SimpleStorageContract","networks","setState","contractError","abrupt","Contract","abi","address","contractAddress","runExample","alert","error","_callee2","_this$state","response","_context2","methods","get","addToContract","bind","assertThisInitialized","newStorage","set","send","from","react_default","createElement","Alert","color","className","class","href","type","data-toggle","aria-controls","aria-expanded","aria-label","onClick","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a4dcc6b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/anime3.bd6820f1.png\";","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","/*!\n\n=========================================================\n* Black Dashboard React v1.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/black-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/black-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n\n// reactstrap components\nimport {\n  Button,\n  Collapse,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Input,\n  InputGroup,\n  NavbarBrand,\n  Navbar,\n  NavLink,\n  Nav,\n  Container,\n  Modal\n} from \"reactstrap\";\n\nclass AdminNavbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapseOpen: false,\n      modalSearch: false,\n      color: \"navbar-transparent\"\n    };\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateColor);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateColor);\n  }\n  // function that adds color white/transparent to the navbar on resize (this is for the collapse)\n  updateColor = () => {\n    if (window.innerWidth < 993 && this.state.collapseOpen) {\n      this.setState({\n        color: \"bg-white\"\n      });\n    } else {\n      this.setState({\n        color: \"navbar-transparent\"\n      });\n    }\n  };\n  // this function opens and closes the collapse on small devices\n  toggleCollapse = () => {\n    if (this.state.collapseOpen) {\n      this.setState({\n        color: \"navbar-transparent\"\n      });\n    } else {\n      this.setState({\n        color: \"bg-white\"\n      });\n    }\n    this.setState({\n      collapseOpen: !this.state.collapseOpen\n    });\n  };\n  // this function is to open the Search modal\n  toggleModalSearch = () => {\n    this.setState({\n      modalSearch: !this.state.modalSearch\n    });\n  };\n  render() {\n    return (\n      <>\n        <Navbar\n          className={classNames(\"navbar-absolute\", this.state.color)}\n          expand=\"lg\"\n        >\n          <Container fluid>\n            <div className=\"navbar-wrapper\">\n              <div\n                className={classNames(\"navbar-toggle d-inline\", {\n                  toggled: this.props.sidebarOpened\n                })}\n              >\n                <button\n                  className=\"navbar-toggler\"\n                  type=\"button\"\n                  onClick={this.props.toggleSidebar}\n                >\n                  <span className=\"navbar-toggler-bar bar1\" />\n                  <span className=\"navbar-toggler-bar bar2\" />\n                  <span className=\"navbar-toggler-bar bar3\" />\n                </button>\n              </div>\n              <NavbarBrand href=\"#pablo\" onClick={e => e.preventDefault()}>\n                {this.props.brandText}\n              </NavbarBrand>\n            </div>\n            <button\n              aria-expanded={false}\n              aria-label=\"Toggle navigation\"\n              className=\"navbar-toggler\"\n              data-target=\"#navigation\"\n              data-toggle=\"collapse\"\n              id=\"navigation\"\n              type=\"button\"\n              onClick={this.toggleCollapse}\n            >\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n            </button>\n            <Collapse navbar isOpen={this.state.collapseOpen}>\n              <Nav className=\"ml-auto\" navbar>\n                <InputGroup className=\"search-bar\">\n                  <Button\n                    color=\"link\"\n                    data-target=\"#searchModal\"\n                    data-toggle=\"modal\"\n                    id=\"search-button\"\n                    onClick={this.toggleModalSearch}\n                  >\n                    <i className=\"tim-icons icon-zoom-split\" />\n                    <span className=\"d-lg-none d-md-block\">Search</span>\n                  </Button>\n                </InputGroup>\n                <UncontrolledDropdown nav>\n                  <DropdownToggle\n                    caret\n                    color=\"default\"\n                    data-toggle=\"dropdown\"\n                    nav\n                  >\n                    <div className=\"notification d-none d-lg-block d-xl-block\" />\n                    <i className=\"tim-icons icon-sound-wave\" />\n                    <p className=\"d-lg-none\">Notifications</p>\n                  </DropdownToggle>\n                  <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Mike John responded to your email\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        You have 5 more tasks\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Your friend Michael is in town\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Another notification\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Another one\n                      </DropdownItem>\n                    </NavLink>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav>\n                  <DropdownToggle\n                    caret\n                    color=\"default\"\n                    data-toggle=\"dropdown\"\n                    nav\n                    onClick={e => e.preventDefault()}\n                  >\n                    <div className=\"photo\">\n                      <img alt=\"...\" src={require(\"../../assets/img/anime3.png\")} />\n                    </div>\n                    <b className=\"caret d-none d-lg-block d-xl-block\" />\n                    <p className=\"d-lg-none\">Log out</p>\n                  </DropdownToggle>\n                  <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Profile</DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Settings</DropdownItem>\n                    </NavLink>\n                    <DropdownItem divider tag=\"li\" />\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Log out</DropdownItem>\n                    </NavLink>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n                <li className=\"separator d-lg-none\" />\n              </Nav>\n            </Collapse>\n          </Container>\n        </Navbar>\n        <Modal\n          modalClassName=\"modal-search\"\n          isOpen={this.state.modalSearch}\n          toggle={this.toggleModalSearch}\n        >\n          <div className=\"modal-header\">\n            <Input id=\"inlineFormInputGroup\" placeholder=\"SEARCH\" type=\"text\" />\n            <button\n              aria-label=\"Close\"\n              className=\"close\"\n              data-dismiss=\"modal\"\n              type=\"button\"\n              onClick={this.toggleModalSearch}\n            >\n              <i className=\"tim-icons icon-simple-remove\" />\n            </button>\n          </div>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default AdminNavbar;\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n\n// import \"./App.css\";\nimport \"./black-dashboard/assets/css/black-dashboard-react.css\";\nimport \"./black-dashboard/assets/css/nucleo-icons.css\";\nimport AdminNavbar from \"./black-dashboard/components/Navbars/AdminNavbar.jsx\";\nimport { Container, Alert } from \"reactstrap\";\n\nclass App extends Component {\n\n  state = { storageValue: 0, web3: null, accounts: null, contract: null };\n\n  constructor(props) {\n    super(props);\n    this.addToContract = this.addToContract.bind(this);\n  }\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n\n\n      if(!deployedNetwork){\n        console.log('ooops');\n        this.setState({contractError: true});\n        return;\n      }\n\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ web3, accounts, contract: instance, contractAddress: deployedNetwork.address }, this.runExample);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    // await contract.methods.set(5).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  async addToContract() {\n    console.log('Adding...');\n\n    var newStorage = this.state.storageValue + 1;\n\n    const response = await this.state.contract.methods.set(newStorage).send({ from: this.state.accounts[0] });\n\n    this.setState({ storageValue: newStorage });\n  }\n\n  render() {\n\n    if(this.state.contractError){\n      return <Alert color=\"danger\">No Contract Deployed On Your Current Network - Try Rinkeby?</Alert>;\n    }\n\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"App\">\n        <div class=\"main-panel\">\n        <nav class=\"navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top \">\n          <div class=\"container-fluid\">\n            <div class=\"navbar-wrapper\">\n\n              <a class=\"navbar-brand\" href=\"#pablo\">Dashboard</a>\n            </div>\n\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" aria-controls=\"navigation-index\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span class=\"sr-only\">Toggle navigation</span>\n              <span class=\"navbar-toggler-icon icon-bar\"></span>\n              <span class=\"navbar-toggler-icon icon-bar\"></span>\n              <span class=\"navbar-toggler-icon icon-bar\"></span>\n            </button>\n\n            <div class=\"collapse navbar-collapse justify-content-end\">\n              <ul class=\"navbar-nav\">\n                <li class=\"nav-item\">\n                  <a class=\"nav-link\" href=\"#pablo\">\n                    <i class=\"tim-icons icon-bell-55\"></i>  Notifications\n                  </a>\n                </li>\n              </ul>\n            </div>\n          </div>\n        </nav>\n\n      <div class=\"content\">\n        <div class=\"container-fluid\">\n        <h1>BLK Good to Go!</h1>\n          <h3>\n            Fancy display heading\n            <small className=\"text-muted\">With faded secondary text</small>\n          </h3>\n\n          <h2>Smart Contract Example</h2>\n          <p>\n            Connected to contract at: {this.state.contractAddress}\n          </p>\n\n          <h4>The stored value is: {this.state.storageValue}</h4>\n        <button type=\"button\" class=\"btn btn-primary\" onClick={this.addToContract}>Primary</button>\n\n      </div>\n    </div>\n  </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}