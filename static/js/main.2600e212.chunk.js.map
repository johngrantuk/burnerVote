{"version":3,"sources":["black-dashboard/assets/img/anime3.png","components/Deposit.js","components/Deposits.js","components/Proposal.js","components/Proposals.js","App.js","black-dashboard/components/Navbars/AdminNavbar.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Deposit","react_default","a","createElement","this","props","deposit","id","SenderAddr","ContriValue","PropName","Choice","Component","Deposits","deposits","map","components_Deposit","key","name","Proposal","state","uniqueAddresses","componentDidMount","_callee","regenerator_default","wrap","_context","prev","next","_this","graph","stop","console","log","proposal","query","fetch","method","headers","Content-Type","Accept","body","JSON","stringify","then","r","json","data","catch","error","result","anonymousDeposits","yes","no","totalDeposits","length","unique","values","totalValue","i","indexOf","push","parseFloat","setState","yesCount","noCount","noUniqueAdresses","Row","Col","className","issuer","deadline","optionBaddr","optionAaddr","dist_default","animate","animationDuration","animationEasing","cx","cy","color","title","value","label","labelPosition","labelStyle","fill","fontFamily","fontSize","lengthAngle","lineWidth","onClick","undefined","onMouseOut","onMouseOver","paddingAngle","radius","ratio","rounded","startAngle","style","height","Proposals","proposals","components_Proposal","App","React","Map","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","storageValue","web3","accounts","contract","asyncToGenerator","mark","t0","alert","newProposalIssueds","contractError","href","type","data-toggle","aria-controls","aria-expanded","aria-label","components_Proposals","components_Deposits","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","basename","to","react_router","exact","path","component","_ref","params","address","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2600e212.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/anime3.bd6820f1.png\";","import React, { Component } from 'react';\n\nclass Deposit extends Component {\n\n  /*\n  anonymousDeposits(first: 5) {\n    id\n    SenderAddr\n    ContriValue\n    PropName\n    Choice\n  }\n  */\n  render() {\n    return(\n      <div>\n        <p>ID: {this.props.deposit.id}</p>\n        <p>SenderAddr: {this.props.deposit.SenderAddr}</p>\n        <p>ContriValue: {this.props.deposit.ContriValue}</p>\n          <p>PropName: {this.props.deposit.PropName}</p>\n        <p>Choice: {this.props.deposit.Choice}</p>\n        <hr/>\n      </div>\n    )\n\n  }\n}\n\nexport default Deposit\n","import React, { Component } from 'react';\nimport Deposit from './Deposit';\n\nclass Deposits extends Component {\n\n  render() {\n\n    const deposits = this.props.deposits.map(deposit => {\n      return <Deposit key={deposit.id} deposit={deposit}/>\n    })\n\n    return (\n      <div>\n        <h4>{this.props.name} Deposits</h4>\n        {deposits}\n\n      </div>\n    )\n  }\n}\n\nexport default Deposits\n","import React, { Component } from 'react';\nimport Deposits from './Deposits';\nimport ReactMinimalPieChart from 'react-minimal-pie-chart';\nimport { Row, Col } from \"reactstrap\";\n\nclass Proposal extends Component {\n\n  state = { deposits: [], uniqueAddresses: [] };\n\n\n  componentDidMount = async () => {\n      await this.graph();\n  };\n\n  async graph(){\n\n    console.log('graph(): ' + this.props.proposal.name)\n    // https://thegraph.com/docs/graphql-api\n    // Gets all deposits for this proposal\n    const query = `{ anonymousDeposits (where: {PropName: \"` + this.props.proposal.name + `\"}) {\n        id\n        SenderAddr\n        ContriValue\n        PropName\n        Choice\n      }\n    }`;\n\n    const results = {}\n\n    const result = await fetch('https://api.thegraph.com/subgraphs/name/madhur4444/imgovdynamic', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify({\n        query\n      })\n    }).then(r => r.json()).then(data => data).catch(error => console.log(error))\n\n    // console.log('Result:');\n    // console.log(result);\n\n    if(!result.data)\n      return;\n\n    var anonymousDeposits = result.data.anonymousDeposits;\n\n    var yes = 0;\n    var no = 0;\n    var totalDeposits = anonymousDeposits.length;\n    var unique = [];\n    var values = {};\n    var totalValue = 0;\n\n    for(var i = 0;i < totalDeposits;i++){\n\n      if(unique.indexOf(anonymousDeposits[i].SenderAddr) === -1){\n        unique.push(anonymousDeposits[i].SenderAddr);\n        values[anonymousDeposits[i].SenderAddr] = parseFloat(anonymousDeposits[i].ContriValue);\n      }else{\n        values[anonymousDeposits[i].SenderAddr] += parseFloat(anonymousDeposits[i].ContriValue);\n      }\n\n      if(anonymousDeposits[i].Choice == 'yes'){\n        yes++;\n      } else {\n        no++;\n      }\n\n      totalValue += parseFloat(anonymousDeposits[i].ContriValue);\n    }\n    console.log(this.props.proposal.name)\n    console.log('Total: ' + totalDeposits);\n    console.log('Yes: ' + yes);\n    console.log('No: ' + no);\n    console.log('No Unique Addresses: ' + unique.length)\n    console.log(unique)\n    console.log('Total Value: ' + totalValue)\n    console.log(values)\n\n    this.setState({\n      deposits: anonymousDeposits,\n      yesCount: yes,\n      noCount: no,\n      uniqueAddresses: unique\n    });\n\n    console.log('graph() OUT')\n  }\n\n  render() {\n    /*\n    newProposalIssueds(first: 5) {\n      id\n      issuer\n      deadline\n      name\n      data\n      optionBaddr\n      optionAaddr\n    }\n\n    */\n    // <Deposits name={this.props.proposal.name} deposits={this.state.deposits} />\n    var noUniqueAdresses = this.state.uniqueAddresses.length;\n\n    return(\n      <div>\n        <h3>{this.props.proposal.name}</h3>\n        <Row>\n          <Col className=\"col-sm\">\n            <p>ID: {this.props.proposal.id}</p>\n            <p>Issuer: {this.props.proposal.issuer}</p>\n            <p>Deadline: {this.props.proposal.deadline}</p>\n            <p>Name: {this.props.proposal.name}</p>\n            <p>Data: {this.props.proposal.data}</p>\n            <p>optionBaddr: {this.props.proposal.optionBaddr}</p>\n            <p>optionAaddr: {this.props.proposal.optionAaddr}</p>\n            <br/>\n            <p>Yes Votes: {this.state.yesCount}</p>\n            <p>No Votes: {this.state.noCount}</p>\n            <p>uniqueAddresses: {noUniqueAdresses}</p>\n          </Col>\n          <Col className=\"col-sm\">\n            <ReactMinimalPieChart\n              animate={false}\n              animationDuration={500}\n              animationEasing=\"ease-out\"\n              cx={50}\n              cy={50}\n              data={[\n                {\n                  color: '#E38627',\n                  title: 'Yes',\n                  value: this.state.yesCount\n                },\n                {\n                  color: '#C13C37',\n                  title: 'Two',\n                  value: this.state.noCount\n                }\n              ]}\n              label\n              labelPosition={50}\n              labelStyle={{\n                fill: '#121212',\n                fontFamily: 'sans-serif',\n                fontSize: '5px'\n              }}\n              lengthAngle={360}\n              lineWidth={100}\n              onClick={undefined}\n              onMouseOut={undefined}\n              onMouseOver={undefined}\n              paddingAngle={0}\n              radius={50}\n              ratio={1}\n              rounded={false}\n              startAngle={0}\n              style={{\n                height: '300px'\n              }}\n            />\n          </Col>\n        </Row>\n\n\n\n        <hr/>\n\n      </div>\n    )\n\n  }\n}\n\nexport default Proposal\n","import React, { Component } from 'react';\nimport Proposal from './Proposal';\n\nclass Proposals extends Component {\n\n  render() {\n\n    const proposals = this.props.proposals.map(proposal => {\n      return <Proposal key={proposal.id} proposal={proposal}/>\n    })\n\n    return (\n      <div>\n        <h2>Proposals</h2>\n        {proposals}\n\n      </div>\n    )\n  }\n}\n\nexport default Proposals\n","import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport Proposals from './components/Proposals';\nimport Deposits from './components/Deposits';\n\n// import \"./App.css\";\nimport \"./black-dashboard/assets/css/black-dashboard-react.css\";\nimport \"./black-dashboard/assets/css/nucleo-icons.css\";\nimport AdminNavbar from \"./black-dashboard/components/Navbars/AdminNavbar.jsx\";\nimport { Container, Alert } from \"reactstrap\";\n\nvar k\nvar a\nvar red\nvar blue\nvar name\nvar opA\nvar opB\nvar providerone\nvar web3\nvar defaultAccount\nvar proposalissued\nvar deadline\nvar moneymap = new Map();\nvar dataextra\n\nclass App extends Component {\n\n  state = { storageValue: 0, web3: null, accounts: null, contract: null, proposals: [], deposits: [] };\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount = async () => {\n    try {\n      console.log('DidMount...');\n\n      console.log('Loading graph...');\n      await this.graph();\n      /*\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      */\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      // this.setState({ web3, accounts });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n  async graph(){\n\n    // https://thegraph.com/docs/graphql-api\n    // anonymousDeposits (where: {PropName: \"qwwafae\"}) {\n    const query = `{\n      anonymousDeposits {\n        id\n        SenderAddr\n        ContriValue\n        PropName\n        Choice\n      }\n      newProposalIssueds(first: 5) {\n        id\n        issuer\n        deadline\n        name\n        data\n        optionBaddr\n        optionAaddr\n      }\n    }`;\n\n    const results = {}\n\n    const result = await fetch('https://api.thegraph.com/subgraphs/name/madhur4444/imgovdynamic', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n      },\n      body: JSON.stringify({\n        query\n      })\n    }).then(r => r.json()).then(data => data).catch(error => console.log(error))\n\n    // console.log('Result:');\n    // console.log(result);\n    var anonymousDeposits = result.data.anonymousDeposits;\n    var newProposalIssueds = result.data.newProposalIssueds;\n    this.setState({\n      proposals: newProposalIssueds,\n      deposits: anonymousDeposits\n    });\n\n    console.log('graph() OUT')\n  }\n\n  render() {\n\n    if(this.state.contractError){\n      // return <Alert color=\"danger\">No Contract Deployed On Your Current Network - Try Rinkeby?</Alert>;\n    }\n\n    if (!this.state.web3) {\n      // return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"main-panel\">\n          <nav className=\"navbar navbar-expand-lg navbar-transparent navbar-absolute fixed-top \">\n            <div className=\"container-fluid\">\n              <div className=\"navbar-wrapper\">\n\n                <a className=\"navbar-brand\" href=\"#pablo\">Dashboard</a>\n              </div>\n\n              <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" aria-controls=\"navigation-index\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"sr-only\">Toggle navigation</span>\n                <span className=\"navbar-toggler-icon icon-bar\"></span>\n                <span className=\"navbar-toggler-icon icon-bar\"></span>\n                <span className=\"navbar-toggler-icon icon-bar\"></span>\n              </button>\n\n              <div className=\"collapse navbar-collapse justify-content-end\">\n                <ul className=\"navbar-nav\">\n                  <li className=\"nav-item\">\n                    <a className=\"nav-link\" href=\"#pablo\">\n                      <i className=\"tim-icons icon-bell-55\"></i>  Notifications\n                    </a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </nav>\n\n          <div className=\"content\">\n            <div className=\"container-fluid\">\n\n              <Proposals proposals={this.state.proposals} />\n              <Deposits name={\"All\"} deposits={this.state.deposits} />\n\n\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/*!\n\n=========================================================\n* Black Dashboard React v1.0.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/black-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/black-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React from \"react\";\n// nodejs library that concatenates classes\nimport classNames from \"classnames\";\n\n// reactstrap components\nimport {\n  Button,\n  Collapse,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  Input,\n  InputGroup,\n  NavbarBrand,\n  Navbar,\n  NavLink,\n  Nav,\n  Container,\n  Modal\n} from \"reactstrap\";\n\nclass AdminNavbar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapseOpen: false,\n      modalSearch: false,\n      color: \"navbar-transparent\"\n    };\n  }\n  componentDidMount() {\n    window.addEventListener(\"resize\", this.updateColor);\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateColor);\n  }\n  // function that adds color white/transparent to the navbar on resize (this is for the collapse)\n  updateColor = () => {\n    if (window.innerWidth < 993 && this.state.collapseOpen) {\n      this.setState({\n        color: \"bg-white\"\n      });\n    } else {\n      this.setState({\n        color: \"navbar-transparent\"\n      });\n    }\n  };\n  // this function opens and closes the collapse on small devices\n  toggleCollapse = () => {\n    if (this.state.collapseOpen) {\n      this.setState({\n        color: \"navbar-transparent\"\n      });\n    } else {\n      this.setState({\n        color: \"bg-white\"\n      });\n    }\n    this.setState({\n      collapseOpen: !this.state.collapseOpen\n    });\n  };\n  // this function is to open the Search modal\n  toggleModalSearch = () => {\n    this.setState({\n      modalSearch: !this.state.modalSearch\n    });\n  };\n  render() {\n    return (\n      <>\n        <Navbar\n          className={classNames(\"navbar-absolute\", this.state.color)}\n          expand=\"lg\"\n        >\n          <Container fluid>\n            <div className=\"navbar-wrapper\">\n              <div\n                className={classNames(\"navbar-toggle d-inline\", {\n                  toggled: this.props.sidebarOpened\n                })}\n              >\n                <button\n                  className=\"navbar-toggler\"\n                  type=\"button\"\n                  onClick={this.props.toggleSidebar}\n                >\n                  <span className=\"navbar-toggler-bar bar1\" />\n                  <span className=\"navbar-toggler-bar bar2\" />\n                  <span className=\"navbar-toggler-bar bar3\" />\n                </button>\n              </div>\n              <NavbarBrand href=\"#pablo\" onClick={e => e.preventDefault()}>\n                {this.props.brandText}\n              </NavbarBrand>\n            </div>\n            <button\n              aria-expanded={false}\n              aria-label=\"Toggle navigation\"\n              className=\"navbar-toggler\"\n              data-target=\"#navigation\"\n              data-toggle=\"collapse\"\n              id=\"navigation\"\n              type=\"button\"\n              onClick={this.toggleCollapse}\n            >\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n              <span className=\"navbar-toggler-bar navbar-kebab\" />\n            </button>\n            <Collapse navbar isOpen={this.state.collapseOpen}>\n              <Nav className=\"ml-auto\" navbar>\n                <InputGroup className=\"search-bar\">\n                  <Button\n                    color=\"link\"\n                    data-target=\"#searchModal\"\n                    data-toggle=\"modal\"\n                    id=\"search-button\"\n                    onClick={this.toggleModalSearch}\n                  >\n                    <i className=\"tim-icons icon-zoom-split\" />\n                    <span className=\"d-lg-none d-md-block\">Search</span>\n                  </Button>\n                </InputGroup>\n                <UncontrolledDropdown nav>\n                  <DropdownToggle\n                    caret\n                    color=\"default\"\n                    data-toggle=\"dropdown\"\n                    nav\n                  >\n                    <div className=\"notification d-none d-lg-block d-xl-block\" />\n                    <i className=\"tim-icons icon-sound-wave\" />\n                    <p className=\"d-lg-none\">Notifications</p>\n                  </DropdownToggle>\n                  <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Mike John responded to your email\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        You have 5 more tasks\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Your friend Michael is in town\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Another notification\n                      </DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">\n                        Another one\n                      </DropdownItem>\n                    </NavLink>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n                <UncontrolledDropdown nav>\n                  <DropdownToggle\n                    caret\n                    color=\"default\"\n                    data-toggle=\"dropdown\"\n                    nav\n                    onClick={e => e.preventDefault()}\n                  >\n                    <div className=\"photo\">\n                      <img alt=\"...\" src={require(\"../../assets/img/anime3.png\")} />\n                    </div>\n                    <b className=\"caret d-none d-lg-block d-xl-block\" />\n                    <p className=\"d-lg-none\">Log out</p>\n                  </DropdownToggle>\n                  <DropdownMenu className=\"dropdown-navbar\" right tag=\"ul\">\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Profile</DropdownItem>\n                    </NavLink>\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Settings</DropdownItem>\n                    </NavLink>\n                    <DropdownItem divider tag=\"li\" />\n                    <NavLink tag=\"li\">\n                      <DropdownItem className=\"nav-item\">Log out</DropdownItem>\n                    </NavLink>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n                <li className=\"separator d-lg-none\" />\n              </Nav>\n            </Collapse>\n          </Container>\n        </Navbar>\n        <Modal\n          modalClassName=\"modal-search\"\n          isOpen={this.state.modalSearch}\n          toggle={this.toggleModalSearch}\n        >\n          <div className=\"modal-header\">\n            <Input id=\"inlineFormInputGroup\" placeholder=\"SEARCH\" type=\"text\" />\n            <button\n              aria-label=\"Close\"\n              className=\"close\"\n              data-dismiss=\"modal\"\n              type=\"button\"\n              onClick={this.toggleModalSearch}\n            >\n              <i className=\"tim-icons icon-simple-remove\" />\n            </button>\n          </div>\n        </Modal>\n      </>\n    );\n  }\n}\n\nexport default AdminNavbar;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, Link, Route } from 'react-router-dom'\n// <App />,\n\nconst About = () => (\n  <div>\n    <h2>About</h2>\n  </div>\n)\n\nconst Profile = ({match}) => (\n  <div>\n    <h2>Profile For Address: {match.params.address}</h2>\n  </div>\n)\n\n// <Route exact path=\"/\" component={App} />\n\nReactDOM.render(\n  <HashRouter basename='/'>\n      <div>\n        <aside>\n          <Link to={`/`}>Home</Link>\n          <Link to={`/about`}>About</Link>\n        </aside>\n\n        <main>\n          <Route exact path=\"/\" component={App} />\n          <Route path=\"/home\" component={App} />\n          <Route path=\"/about\" component={About} />\n          <Route exact path=\"/profile/:address\" component={Profile} />\n        </main>\n      </div>\n  </HashRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}